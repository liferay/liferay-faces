<?xml version="1.0" encoding="UTF-8"?>
<ui:component xmlns="http://www.w3.org/1999/xhtml" xmlns:c="http://java.sun.com/jsp/jstl/core" xmlns:f="http://java.sun.com/jsf/core"
	xmlns:h="http://java.sun.com/jsf/html" xmlns:ui="http://java.sun.com/jsf/facelets" xmlns:cc="http://java.sun.com/jsf/composite"
	xmlns:aui="http://liferay.com/faces/aui" xmlns:aui-cc="http://liferay.com/faces/aui-cc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.w3.org/1999/xhtml http://www.w3.org/2002/08/xhtml/xhtml1-transitional.xsd">

	<cc:interface shortDescription="The &lt;code&gt;aui-cc:input&lt;/code&gt; renders either an input (type=text), textarea, input (type=&quot;secret&quot;), input (type=&quot;checkbox&quot;), or input (type=&quot;radio&quot;) with appropriate Alloy UI CSS class names, according to the value of the type attribute.">
		<cc:attribute name="cols" required="false" shortDescription="The number of columns for the rendered textarea." />
		<cc:attribute name="cssClass" required="false" shortDescription="The name of a CSS class that is to be rendered within the class attribute (same as styleClass)." />
		<cc:attribute name="disabled" default="false" required="false" shortDescription="This is an HTML pass-thru type of attribute. The default value is “false”." />
		<cc:attribute name="inlineLabel" default="left" required="false" shortDescription="The position of the label. Valid values are: left, right." />
		<cc:attribute name="inlineMessage" default="false" required="false" shortDescription="Boolean flag indicating whether or not there should be an inline h:message tag included. The default value is &quot;false&quot;." />
		<cc:attribute name="label" required="true" shortDescription="The text value for the rendered label of the button." />
		<cc:attribute name="onblur" required="false" shortDescription="This is an HTML pass-thru type of attribute." />
		<cc:attribute name="onchange" required="false" shortDescription="This is an HTML pass-thru type of attribute." />
		<cc:attribute name="readonly" default="false" required="false" shortDescription="This is an HTML pass-thru type of attribute. The default value is &quot;false&quot;." />
		<cc:attribute name="required" default="false" required="false" shortDescription="Boolean flag indicating whether or not it is required for the user to supply a value for this component. The default value is &quot;false&quot;." />
		<cc:attribute name="rows" required="false" shortDescription="The number of rows for the rendered textarea." />
		<cc:attribute name="size" required="false" shortDescription="The size/width of the rendered input text box." />
		<cc:attribute name="style" required="false" shortDescription="This is an HTML pass-thru type of attribute." />
		<cc:attribute name="styleClass" required="false" shortDescription="The name of a CSS class that is to be rendered within the class attribute." />
		<cc:attribute name="type" default="text" required="false" shortDescription="The type of input field. Valid values are: text, textarea, password, checkbox, boolean." />
		<cc:attribute name="validatorMessage" required="false" shortDescription="This attribute is a pass-thru to the underlying JSF component's validatorMessage attribute, which replaces the message which is output by the validator." />
		<cc:attribute name="value" required="true" shortDescription="The current value of this component." />
		<cc:editableValueHolder name="inputText" targets="t1"/>
	</cc:interface>

	<cc:implementation>

		<aui:field cssClass="#{cc.attrs.cssClass}" inlineLabel="#{cc.attrs.inlineLabel}" label="#{cc.attrs.label}" styleClass="#{cc.attrs.styleClass}"
			type="#{cc.attrs.type}">
			<c:choose>
				<c:when test="#{cc.attrs.type == 'text'}">
					<c:choose>
						<c:when test="#{empty cc.attrs.validatorMessage}">
							<h:inputText id="t1" disabled="#{cc.attrs.disabled}" label="#{cc.attrs.label}" onblur="#{cc.attrs.onblur}" required="#{cc.attrs.required}" readonly="#{cc.attrs.readonly}"
								size="#{cc.attrs.size}" style="#{cc.attrs.style}" styleClass="aui-field-input aui-field-input-text" value="#{cc.attrs.value}" />
						</c:when>
						<c:otherwise>
							<h:inputText id="t1" disabled="#{cc.attrs.disabled}" label="#{cc.attrs.label}" onblur="#{cc.attrs.onblur}" required="#{cc.attrs.required}" readonly="#{cc.attrs.readonly}"
								size="#{cc.attrs.size}" style="#{cc.attrs.style}" styleClass="aui-field-input aui-field-input-text"
								validatorMessage="#{cc.attrs.validatorMessage}" value="#{cc.attrs.value}" />
						</c:otherwise>
					</c:choose>
				</c:when>
				<c:when test="#{cc.attrs.type == 'textarea'}">
					<c:choose>
						<c:when test="#{empty cc.attrs.validatorMessage}">
							<h:inputTextarea id="t1" cols="#{cc.attrs.cols}" disabled="#{cc.attrs.disabled}" label="#{cc.attrs.label}" onblur="#{cc.attrs.onblur}" readonly="#{cc.attrs.readonly}"
								required="#{cc.attrs.required}" rows="#{cc.attrs.rows}" size="#{cc.attrs.size}" style="#{cc.attrs.style}"
								styleClass="aui-field-input aui-field-input-text" value="#{cc.attrs.value}" />
						</c:when>
						<c:otherwise>
							<h:inputTextarea id="t1" cols="#{cc.attrs.cols}" disabled="#{cc.attrs.disabled}" label="#{cc.attrs.label}" onblur="#{cc.attrs.onblur}" readonly="#{cc.attrs.readonly}"
								required="#{cc.attrs.required}" rows="#{cc.attrs.rows}" style="#{cc.attrs.style}" size="#{cc.attrs.size}"
								styleClass="aui-field-input aui-field-input-text" validatorMessage="#{cc.attrs.validatorMessage}" value="#{cc.attrs.value}" />
						</c:otherwise>
					</c:choose>
				</c:when>
				<c:when test="#{cc.attrs.type == 'password'}">
					<c:choose>
						<c:when test="#{empty cc.attrs.validatorMessage}">
							<h:inputSecret id="t1" label="#{cc.attrs.label}" onblur="#{cc.attrs.onblur}" required="#{cc.attrs.required}" size="#{cc.attrs.size}" style="#{cc.attrs.style}"
								styleClass="aui-field-input aui-field-input-text" value="#{cc.attrs.value}" disabled="#{cc.attrs.disabled}" readonly="#{cc.attrs.readonly}" />
						</c:when>
						<c:otherwise>
							<h:inputSecret id="t1" label="#{cc.attrs.label}" onblur="#{cc.attrs.onblur}" required="#{cc.attrs.required}" size="#{cc.attrs.size}" style="#{cc.attrs.style}"
								styleClass="aui-field-input aui-field-input-text" validatorMessage="#{cc.attrs.validatorMessage}" value="#{cc.attrs.value}" disabled="#{cc.attrs.disabled}"
								readonly="#{cc.attrs.readonly}" />
						</c:otherwise>
					</c:choose>
				</c:when>
				<c:when test="#{(cc.attrs.type == 'checkbox') || (cc.attrs.type == 'boolean')}">
					<c:choose>
						<c:when test="#{empty cc.attrs.validatorMessage}">
							<h:selectBooleanCheckbox id="t1" label="#{cc.attrs.label}" onchange="#{cc.attrs.onchange}" required="#{cc.attrs.required}" style="#{cc.attrs.style}"
								styleClass="aui-field-input aui-field-input-choice" value="#{cc.attrs.value}" disabled="#{cc.attrs.disabled}" readonly="#{cc.attrs.readonly}" />
						</c:when>
						<c:otherwise>
							<h:selectBooleanCheckbox id="t1" label="#{cc.attrs.label}" onchange="#{cc.attrs.onchange}" required="#{cc.attrs.required}" style="#{cc.attrs.style}"
								styleClass="aui-field-input aui-field-input-choice" validatorMessage="#{cc.attrs.validatorMessage}" value="#{cc.attrs.value}" disabled="#{cc.attrs.disabled}"
								readonly="#{cc.attrs.readonly}" />
						</c:otherwise>
					</c:choose>
				</c:when>
			</c:choose>
			<c:if test="#{cc.attrs.inlineMessage}">
				<aui-cc:message for="t1" style="display: inline;" />
			</c:if>
		</aui:field>
	</cc:implementation>

</ui:component>
