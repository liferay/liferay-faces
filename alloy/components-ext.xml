<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE components>
<components extends="./target/alloy-generator/data.xml" namespace="aui" namespaceURI="http://liferay.com/faces/aui"
	description="The Liferay Faces Alloy facelet component tags with the &lt;code&gt;aui:&lt;/code&gt; tag name prefix.">
	<functions>
		<function>
			<description>Returns an escaped representation of the specified client ID.</description>
			<function-name>escapeClientId</function-name>
			<function-class>com.liferay.faces.util.component.ComponentUtil</function-class>
			<function-signature>java.lang.String escapeClientId(java.lang.String)</function-signature>
		</function>
		<function>
			<description>Returns the client ID associated with the specified expression.</description>
			<function-name>findClientId</function-name>
			<function-class>com.liferay.faces.util.component.ComponentUtil</function-class>
			<function-signature>java.lang.String findClientId(java.lang.String)</function-signature>
		</function>
	</functions>
	<component name="AceEditor" parentClass="javax.faces.component.UIInput" />
	<component name="Tab" parentClass="javax.faces.component.UIColumn" rendererParentClass="com.liferay.faces.util.renderer.RendererBase">
		<attributes>
			<attribute>
				<description></description>
				<name>label</name>
				<type>java.lang.String</type>
			</attribute>
		</attributes>
	</component>
	<component name="TabView" parentClass="javax.faces.component.UIData" />

	<component name="Rating" preferredName="starRating" parentClass="javax.faces.component.html.HtmlSelectOneRadio">
		<description>
			<![CDATA[This component renders a set of stars which a user may select to indicate their "rating".  
			Therefore, consider this component to be a form type of element, extending UIInput and ultimately 
			implementing the EditableValueHolder interface as follows: aui:starRating -> Rating -> RatingBase -> 
			HtmlSelectOneRadio -> UISelectOne -> UIInput -:-:-> EditableValueHolder.  Since it extends 
			HtmlSelectOneRadio, you can expect it to behave accordingly, like h:selectOneMenu, accepting selectItems 
			as children, standard converters and validators, etc.  It also inherits all of the relevant attributes of 
			such an EditableValueHolder such as: id, label, required, value, etc.  Please defer to the Vdldoc for 
			your implementation of JSF for definitive descriptions of these attributes "closer to the source".  Also 
			defer to the AlloyUI api http://alloyui.com/api for alloy related attributes, such as: defaultSelected.]]>
		</description>
		<attributes>
			<attribute>
				<description></description>
				<name>disabled</name>
				<type>java.lang.Boolean</type> <!-- This is what the RendererBase uses to ensure that the encode for this attribute is called -->
				<jsfReservedAttribute>true</jsfReservedAttribute>
				<jsfReservedAttributeType>boolean</jsfReservedAttributeType> <!-- what does the jsf getter return? -->
			</attribute>
			<!-- inherited from the JSF implementation -->
			<attribute>
	            <description><![CDATA[The class name of the converter instance to be used by this component.]]></description>
    	        <name>converter</name>
				<type>javax.faces.convert.Converter</type>
				<componentPropertyRequired>false</componentPropertyRequired>
        	</attribute>
	        <attribute>
	            <description><![CDATA[This message, or the result of the given expression, will be used as the text of the converter message instead of any message that comes from the registered converter for this component.  Hopes to provide a straight forward way for those concerned with the view to override any message established by those concerned with the controller.]]></description>
	            <name>converterMessage</name>
				<type>java.lang.String</type>
				<componentPropertyRequired>false</componentPropertyRequired>
	        </attribute>
	        <attribute>
	            <description><![CDATA[A unique identifier for this component.]]></description>
	            <name>id</name>
				<type>java.lang.String</type>
				<componentPropertyRequired>false</componentPropertyRequired>
	        </attribute>
	        <attribute>
	            <description><![CDATA[When this flag is set to true, this component's value must be converted and validated (immediately) during the Apply Request Values phase, instead of (later) during the Process Validations phase.]]></description>
	            <name>immediate</name>
				<type>java.lang.Boolean</type>
				<componentPropertyRequired>false</componentPropertyRequired>
	        </attribute>
	        <attribute>
	            <description><![CDATA[When false, this component will not be rendered.  The default value of this attribute is true.]]></description>
	            <name>rendered</name>
				<type>java.lang.Boolean</type>
				<componentPropertyRequired>false</componentPropertyRequired>
	        </attribute>
	        <attribute>
	            <description><![CDATA[When this is true, a validation error will occur when the user does not specify a value for this component.]]></description>
	            <name>required</name>
				<type>java.lang.Boolean</type>
				<componentPropertyRequired>false</componentPropertyRequired>
	        </attribute>
	        <attribute>
	            <description><![CDATA[This message, or the result of the given expression, will be used as the text of the validation error message instead of any message that comes from the resulting validation error for this component when required="true" and no value is selected by the user.  Hopes to provide a straight forward way for those concerned with the view to override any message established by those concerned with the controller.]]></description>
	            <name>requiredMessage</name>
				<type>java.lang.String</type>
				<componentPropertyRequired>false</componentPropertyRequired>
	        </attribute>
	        <attribute>
	            <description><![CDATA[__DESCRIPTION__]]></description>
	            <name>validator</name>
				<method-signature>void validate(javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object)</method-signature>
				<componentPropertyRequired>false</componentPropertyRequired>
	        </attribute>
	        <attribute>
	            <description><![CDATA[__DESCRIPTION__]]></description>
	            <name>validatorMessage</name>
				<type>java.lang.String</type>
				<componentPropertyRequired>false</componentPropertyRequired>
	        </attribute>
	        <attribute>
	            <description><![CDATA[The value of this component.  This component does, after all, implement EditableValueHolder.  So value of this attribute represents the value of the component.]]></description>
	            <name>value</name>
				<type>java.lang.Object</type>
				<componentPropertyRequired>false</componentPropertyRequired>
	        </attribute>
	        <attribute>
	            <description><![CDATA[__DESCRIPTION__]]></description>
	            <name>valueChangeListener</name>
				<method-signature>void valueChange(javax.faces.event.ValueChangeEvent)</method-signature>
				<componentPropertyRequired>false</componentPropertyRequired>
	        </attribute>
	        <attribute>
	            <description><![CDATA[A hot key character which can help change focus to this component]]></description>
	            <name>accesskey</name>
				<type>java.lang.String</type>
				<componentPropertyRequired>false</componentPropertyRequired>
	        </attribute>
	        <attribute>
	            <description><![CDATA[ TODO __DESCRIPTION__]]></description>
	            <name>border</name>
				<type>int</type>
				<componentPropertyRequired>false</componentPropertyRequired>
	        </attribute>
	        <attribute>
	            <description><![CDATA[This is an i18n attribute, which designates the reading direction for the attribute. For example, right to left (RTL), or left to right (LTR).]]></description>
	            <name>dir</name>
				<type>java.lang.String</type>
				<componentPropertyRequired>false</componentPropertyRequired>
	        </attribute>
	        <attribute>
	            <description><![CDATA[When false, no attribute is rendered (This is the default). When true, this component will never get focus or get included when this form is submitted.  This attribute is rendered as disabled="disabled".]]></description>
	            <name>disabled</name>
				<type>java.lang.Boolean</type>
				<componentPropertyRequired>false</componentPropertyRequired>
	        </attribute>
	        <attribute>
	            <description><![CDATA[A CSS style to apply to the label of a disabled selectItems.]]></description>
	            <name>disabledClass</name>
				<type>java.lang.String</type>
				<componentPropertyRequired>false</componentPropertyRequired>
	        </attribute>
	        <attribute>
	            <description><![CDATA[A CSS style to apply to the label of an enabled selectItems.]]></description>
	            <name>enabledClass</name>
				<type>java.lang.String</type>
				<componentPropertyRequired>false</componentPropertyRequired>
	        </attribute>
	        <attribute>
	            <description><![CDATA[When true, any child selectItem with a noSelectOption attribute (which is set to true) will be hidden from the user.]]></description>
	            <name>hideNoSelectionOption</name>
				<type>java.lang.Boolean</type>
				<componentPropertyRequired>false</componentPropertyRequired>
	        </attribute>
	        <attribute>
	            <description><![CDATA[A name for this component to be rendered to the user.  This name should be localized for the user.]]></description>
	            <name>label</name>
				<type>java.lang.String</type>
				<componentPropertyRequired>false</componentPropertyRequired>
	        </attribute>
	        <attribute>
	            <description><![CDATA[ TODO __DESCRIPTION__]]></description>
	            <name>lang</name>
				<type>java.lang.String</type>
				<componentPropertyRequired>false</componentPropertyRequired>
	        </attribute>
	        <attribute>
	            <description><![CDATA[  TODO __DESCRIPTION__ ]]></description>
	            <name>layout</name>
				<type>java.lang.String</type>
				<componentPropertyRequired>false</componentPropertyRequired>
	        </attribute>
	        <attribute>
	            <description><![CDATA[Javascript to execute after this component loses focus.]]></description>
	            <name>onblur</name>
				<type>java.lang.String</type>
				<componentPropertyRequired>false</componentPropertyRequired>
	        </attribute>
	        <attribute>
	            <description><![CDATA[Javascript to execute after this component's value has changed, and then it loses focus.]]></description>
	            <name>onchange</name>
				<type>java.lang.String</type>
				<componentPropertyRequired>false</componentPropertyRequired>
	        </attribute>
	        <attribute>
	            <description><![CDATA[Javascript to execute when this component is clicked.]]></description>
	            <name>onclick</name>
				<type>java.lang.String</type>
				<componentPropertyRequired>false</componentPropertyRequired>
	        </attribute>
	        <attribute>
	            <description><![CDATA[Javascript to execute when a double click event occurs.]]></description>
	            <name>ondblclick</name>
				<type>java.lang.String</type>
				<componentPropertyRequired>false</componentPropertyRequired>
	        </attribute>
	        <attribute>
	            <description><![CDATA[Javascript to execute when this component gets focus.]]></description>
	            <name>onfocus</name>
				<type>java.lang.String</type>
				<componentPropertyRequired>false</componentPropertyRequired>
	        </attribute>
	        <attribute>
	            <description><![CDATA[Javascript to execute when a keydown event occurs.]]></description>
	            <name>onkeydown</name>
				<type>java.lang.String</type>
				<componentPropertyRequired>false</componentPropertyRequired>
	        </attribute>
	        <attribute>
	            <description><![CDATA[Javascript to execute when a keypress event occurs.]]></description>
	            <name>onkeypress</name>
				<type>java.lang.String</type>
				<componentPropertyRequired>false</componentPropertyRequired>
	        </attribute>
	        <attribute>
	            <description><![CDATA[Javascript to execute when a keyup event occurs.]]></description>
	            <name>onkeyup</name>
				<type>java.lang.String</type>
				<componentPropertyRequired>false</componentPropertyRequired>
	        </attribute>
	        <attribute>
	            <description><![CDATA[Javascript to execute when a mousedown event occurs.]]></description>
	            <name>onmousedown</name>
				<type>java.lang.String</type>
				<componentPropertyRequired>false</componentPropertyRequired>
	        </attribute>
	        <attribute>
	            <description><![CDATA[Javascript to execute when a mousemove event occurs.]]></description>
	            <name>onmousemove</name>
				<type>java.lang.String</type>
				<componentPropertyRequired>false</componentPropertyRequired>
	        </attribute>
	        <attribute>
	            <description><![CDATA[Javascript to execute when a mouseout event occurs.]]></description>
	            <name>onmouseout</name>
				<type>java.lang.String</type>
				<componentPropertyRequired>false</componentPropertyRequired>
	        </attribute>
	        <attribute>
	            <description><![CDATA[Javascript to execute when a mouseover event occurs.]]></description>
	            <name>onmouseover</name>
				<type>java.lang.String</type>
				<componentPropertyRequired>false</componentPropertyRequired>
	        </attribute>
	        <attribute>
	            <description><![CDATA[Javascript to execute when a mouseup event occurs.]]></description>
	            <name>onmouseup</name>
				<type>java.lang.String</type>
				<componentPropertyRequired>false</componentPropertyRequired>
	        </attribute>
	        <attribute>
	            <description><![CDATA[Javascript to execute when the user selects this component.]]></description>
	            <name>onselect</name>
				<type>java.lang.String</type>
				<componentPropertyRequired>false</componentPropertyRequired>
	        </attribute>
	        <attribute>
	            <description><![CDATA[When true, this causes an attribute to be rendered as readonly="readonly", and prevents the user from changing the value of this component.]]></description>
	            <name>readonly</name>
				<type>java.lang.Boolean</type>
				<componentPropertyRequired>false</componentPropertyRequired>
	        </attribute>
	        <attribute>
	            <description><![CDATA[The CSS style(s) to apply to this component as it is rendered.]]></description>
	            <name>styleClass</name>
				<type>java.lang.String</type>
				<componentPropertyRequired>false</componentPropertyRequired>
	        </attribute>
	        <attribute>
	            <description><![CDATA[The CSS style or space-separated styles applying to this component as it is rendered. This ends up getting passed through to the html 'class' attribute of the component.]]></description>
	            <name>styleClass</name>
				<type>java.lang.String</type>
				<componentPropertyRequired>false</componentPropertyRequired>
	        </attribute>
	        <attribute>
	            <description><![CDATA[An integer designating the position in the tabbing order for this component among others, if any.]]></description>
	            <name>tabindex</name>
				<type>java.lang.String</type>
				<componentPropertyRequired>false</componentPropertyRequired>
	        </attribute>
	        <attribute>
	            <description><![CDATA[The title of the component, which is simply passed through as the html 'title' attribute of this component.]]></description>
	            <name>title</name>
				<type>java.lang.String</type>
				<componentPropertyRequired>false</componentPropertyRequired>
	        </attribute>
	        <attribute>
	            <description><![CDATA[A ValueExpression which links this component to a property in a bean, or a ValueBinding reference to a similar UIComponent]]></description>
	            <name>binding</name>
				<type>javax.faces.component.UIComponent</type>
				<componentPropertyRequired>false</componentPropertyRequired>
	        </attribute>
	        <attribute>
	            <description><![CDATA[space-separated tokens delineating the various WAI-ARIA roles that this component is used by]]></description>
	            <name>role</name>
				<type>java.lang.String</type>
				<componentPropertyRequired>false</componentPropertyRequired>
	        </attribute>
		</attributes>
	</component>
	<component name="ThumbRating"
		generateJava="false"
		parentClass="com.liferay.faces.alloy.component.rating.Rating"
		rendererParentClass="com.liferay.faces.alloy.component.rating.RatingRenderer" />

</components>

